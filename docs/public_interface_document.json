{
  "package_name": "com.steve.todo_app_v4",
  "project_description": "The Todo App V4 is a Flutter application that follows the Stacked architecture. It allows users to manage their todo items, including creating, updating, marking as complete, and deleting tasks. The app features routing, dependency injection, and custom dialog/bottom sheet management.",
  "architecture_overview": "The application follows the Stacked architecture, with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The app's structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the Stacked annotations.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This file defines the `NoticeSheetModel` class, which is responsible for managing the state and behavior of a notice bottom sheet within a Flutter application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "The `InfoAlertDialogModel` class is responsible for managing the state and behavior of an information alert dialog in a Flutter application. This class extends the `BaseViewModel` from the `stacked` package, which provides a foundation for building view models in a MVVM (Model-View-ViewModel) architecture.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -up-|> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying an informational alert dialog to the user. It provides a simple and consistent way to present important information or notifications to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, InfoAlertDialogModel, Widget?)\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nclass Dialog {\n}\n\nclass StackedView<T> {\n  + builder(BuildContext, T, Widget?)\n  + viewModelBuilder(BuildContext): T\n}\n\nInfoAlertDialog -up-|> StackedView\nInfoAlertDialog o-- DialogRequest\nInfoAlertDialog o-- Function(DialogResponse)\nInfoAlertDialog o-- Dialog\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the InfoAlertDialog, including the title, description, and a visual graphic. It also includes a 'Got it' button that the user can tap to dismiss the dialog.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Returns a new instance of the InfoAlertDialogModel, which provides the view model for the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_app_v4/ui/common/app_colors.dart",
        "package:todo_app_v4/ui/common/ui_helpers.dart",
        "package:todo_app_v4/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "The `AppViewModel` class is a part of the application's view model, responsible for managing the state and logic of the app-level functionality. It serves as the bridge between the UI and the underlying business logic, ensuring a clean separation of concerns.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/todo_item.dart",
      "description": "This Dart file defines a `TodoItem` widget, which represents a single todo item in a todo list. It is responsible for rendering the visual representation of a todo item and handling user interactions, such as toggling the completion status and deleting the item.",
      "class_diagram": "@startuml\nclass TodoItem extends StatelessWidget {\n  TodoModel todo\n  Function(String) onToggle\n  Function(String) onDelete\n  TodoItem({required this.todo, required this.onToggle, required this.onDelete})\n  Widget build(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the visual representation of the todo item, including a checkbox, the todo title, and the creation date. It also handles the dismissal of the todo item to allow for deletion.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "todo_app_v4/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/features/home/home_repository.dart",
      "description": "The `HomeRepository` class is responsible for managing the CRUD (Create, Read, Update, Delete) operations for todo items in a todo application. It serves as an intermediary between the UI layer and the underlying database service, abstracting away the complexities of data storage and retrieval.",
      "class_diagram": "@startuml\nclass HomeRepository {\n  +getTodos(): Future<List<TodoModel>>\n  +addTodo(TodoModel todo): Future<void>\n  +updateTodo(TodoModel todo): Future<void>\n  +deleteTodo(String id): Future<void>\n  +toggleTodoComplete(String id): Future<void>\n}\n\nclass TodoModel {\n  +id: String\n  +title: String\n  +description: String\n  +completed: bool\n}\n\nclass DatabaseService {\n  +getTodos(): Future<List<TodoModel>>\n  +addTodo(TodoModel todo): Future<void>\n  +updateTodo(TodoModel todo): Future<void>\n  +deleteTodo(String id): Future<void>\n  +toggleTodoComplete(String id): Future<void>\n}\n\nHomeRepository --> DatabaseService\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of todo items from the database.",
          "parameters": [],
          "return_type": "Future<List<TodoModel>>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the database.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the database.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Deletes a todo item from the database.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Toggles the completion status of a todo item in the database.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "todo_app_v4/app/app.locator.dart",
        "todo_app_v4/models/todo_model.dart",
        "todo_app_v4/services/database_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This file provides a collection of UI helper functions and constants that are commonly used across the Flutter application. It serves as a centralized location for various UI-related utilities, including spacing, screen size calculations, and responsive font size management. These helpers simplify the development process by promoting consistency and reusability of UI elements throughout the application.",
      "class_diagram": "@startuml\n\nclass UIHelpers {\n  +const horizontalSpaceTiny\n  +const horizontalSpaceSmall\n  +const horizontalSpaceMedium\n  +const horizontalSpaceLarge\n  +const verticalSpaceTiny\n  +const verticalSpaceSmall\n  +const verticalSpaceMedium\n  +const verticalSpaceLarge\n  +const verticalSpaceMassive\n  +const spacedDivider\n  +verticalSpace(double height): Widget\n  +screenWidth(BuildContext context): double\n  +screenHeight(BuildContext context): double\n  +screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +halfScreenWidth(BuildContext context): double\n  +thirdScreenWidth(BuildContext context): double\n  +quarterScreenWidth(BuildContext context): double\n  +getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  +getResponsiveSmallFontSize(BuildContext context): double\n  +getResponsiveMediumFontSize(BuildContext context): double\n  +getResponsiveLargeFontSize(BuildContext context): double\n  +getResponsiveExtraLargeFontSize(BuildContext context): double\n  +getResponsiveMassiveFontSize(BuildContext context): double\n  +getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n\n@enduml",
      "methods": [
        {
          "name": "verticalSpace",
          "description": "Returns a SizedBox widget with the specified height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the current BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the screen in the current BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height based on the specified parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width based on the specified parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width and the specified font size and maximum value.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This Dart file is responsible for setting up and managing the dialog system in the application. It defines the available dialog types, registers custom dialog builders, and provides a centralized way to display various types of dialogs throughout the application.",
      "class_diagram": "@startuml\n\nclass DialogService {\n  +registerCustomDialogBuilders()\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n}\n\nDialogService o-- InfoAlertDialog\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This function sets up the dialog system by registering the available dialog types and their corresponding dialog builders with the DialogService.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services",
        "app.locator",
        "../ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/add_todo_sheet.dart",
      "description": "The `AddTodoSheet` class is responsible for displaying a bottom sheet that allows users to create a new todo item. It provides a simple interface for capturing the todo title and passing it back to the calling component.",
      "class_diagram": "@startuml\n  class AddTodoSheet {\n    -Function(SheetResponse) completer\n    -SheetRequest request\n    +Widget build(BuildContext context)\n  }\n  @enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the bottom sheet, which includes a text field for entering the todo title and buttons for saving or canceling the operation.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/models/todo_model.dart",
      "description": "The TodoModel class is responsible for encapsulating the data and state of a single todo item in the application. It provides a reusable and immutable representation of a todo, which is essential for managing the application's state and data flow.",
      "class_diagram": "@startuml\nclass TodoModel {\n  -String id\n  -String title\n  -bool isCompleted\n  -DateTime createdAt\n  +TodoModel copyWith()\n  +Map<String, dynamic> toJson()\n  +factory TodoModel.fromJson()\n  +List<Object?> get props\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new TodoModel instance with the specified changes to the original properties.",
          "parameters": [
            "String? id",
            "String? title",
            "bool? isCompleted",
            "DateTime? createdAt"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "toJson",
          "description": "Converts the TodoModel instance to a JSON-serializable map.",
          "parameters": null,
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJson",
          "description": "Creates a TodoModel instance from a JSON-serializable map.",
          "parameters": [
            "Map<String, dynamic> json"
          ],
          "return_type": "TodoModel"
        },
        {
          "name": "props",
          "description": "Returns a list of the TodoModel instance's properties, used for equality comparison.",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing of the Todo App. It defines the available routes in the application, provides methods to navigate between these routes, and generates the necessary code to handle the routing logic.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "todo_app_v4/features/home/home_view.dart",
        "todo_app_v4/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the bottom sheet UI in a Flutter application using the Stacked architecture. It defines the different types of bottom sheets that can be displayed and provides a setup function to register the custom bottom sheet builders.",
      "class_diagram": "@startuml\n' class diagram notation\nclass BottomSheetType {\n  notice\n}\n\nclass NoticeSheet {\n  request: SheetRequest\n  completer: SheetCompleter\n}\n\nclass BottomSheetService {\n  setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nBottomSheetType *-- NoticeSheet\nBottomSheetService o-- BottomSheetType\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This function sets up the custom bottom sheet builders for the application. It retrieves the BottomSheetService instance from the service locator and registers the builders for each BottomSheetType.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/services/database_service.dart",
      "description": "The DatabaseService class is responsible for managing the persistent storage of todo items in the application. It provides a set of CRUD (Create, Read, Update, Delete) operations to interact with the todo data, which is stored using the SharedPreferences package.",
      "class_diagram": "@startuml\nclass DatabaseService {\n  +Future<List<TodoModel>> getTodos()\n  +Future<void> saveTodos(List<TodoModel> todos)\n  +Future<void> addTodo(TodoModel todo)\n  +Future<void> updateTodo(TodoModel updatedTodo)\n  +Future<void> deleteTodo(String id)\n  +Future<void> toggleTodoComplete(String id)\n}\n@enduml",
      "methods": [
        {
          "name": "getTodos",
          "description": "Retrieves the list of todo items stored in SharedPreferences.",
          "parameters": null,
          "return_type": "Future<List<TodoModel>>"
        },
        {
          "name": "saveTodos",
          "description": "Saves the provided list of todo items to SharedPreferences.",
          "parameters": [
            "List<TodoModel> todos"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "addTodo",
          "description": "Adds a new todo item to the list of stored todos.",
          "parameters": [
            "TodoModel todo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updateTodo",
          "description": "Updates an existing todo item in the list of stored todos.",
          "parameters": [
            "TodoModel updatedTodo"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deleteTodo",
          "description": "Removes a todo item from the list of stored todos.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "toggleTodoComplete",
          "description": "Toggles the completion status of a todo item.",
          "parameters": [
            "String id"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:convert",
        "package:shared_preferences/shared_preferences.dart",
        "package:todo_app_v4/models/todo_model.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet that shows a notice or announcement to the user. It is part of the UI layer of the Todo App V4 application, which is built using the Flutter framework and the Stacked architecture pattern.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  +NoticeSheet({required completer, required request})\n  +builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n  +viewModelBuilder(BuildContext context)\n}\n\nclass NoticeSheetModel {\n}\n\nclass StackedView<T> {\n  +builder(BuildContext context, T viewModel, Widget? child)\n  +viewModelBuilder(BuildContext context)\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "The constructor for the `NoticeSheet` class. It takes two required parameters: `completer` and `request`. The `completer` parameter is a function that is called when the bottom sheet is dismissed, and the `request` parameter contains the title and description of the notice to be displayed.",
          "parameters": [
            "completer",
            "request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the UI of the bottom sheet. It takes three parameters: `BuildContext context`, `NoticeSheetModel viewModel`, and `Widget? child`. The method returns a `Widget` that displays the notice title and description in a container with a white background and rounded corners.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `NoticeSheetModel` class, which is used by the `builder` method to access and display the data needed for the notice.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:todo_app_v4/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:todo_app_v4/ui/common/app_colors.dart",
        "package:todo_app_v4/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constants representing the primary color palette used throughout the application's user interface. It provides a centralized location for managing and accessing the application's visual styling and theme.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection or service locator for the application. It is a part of the Stacked architecture, which is a popular Flutter application architecture.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the various services and dependencies that the application needs. It sets up the environment and registers the BottomSheetService, DialogService, and NavigationService as singletons.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant HomeRepository\nparticipant DatabaseService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nHomeViewModel -> HomeRepository: Get todos\nHomeRepository -> DatabaseService: Fetch todo items\nDatabaseService -> HomeRepository: Return todo items\nHomeRepository -> HomeViewModel: Provide todo items\nHomeViewModel -> HomeView: Render todo list\nUser -> HomeView: Interact (add, toggle, delete)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeRepository: Perform CRUD operations\nHomeRepository -> DatabaseService: Update todo items\nDatabaseService -> HomeRepository: Confirm updates\nHomeRepository -> HomeViewModel: Update state\nHomeViewModel -> HomeView: Refresh UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. Each view (e.g., HomeView) has a corresponding view model (e.g., HomeViewModel) that handles the business logic and state for that view. View models are responsible for fetching data from repositories, updating the state, and exposing that state to the UI layer. The Stacked framework provides a clean separation of concerns between the UI and the business logic.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router, which is defined in the app.router.dart file. The main entry point, main.dart, sets up the app and runs the AppView, which initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. The Stacked Router handles all route definitions and transitions between views, ensuring a consistent and maintainable navigation flow."
}